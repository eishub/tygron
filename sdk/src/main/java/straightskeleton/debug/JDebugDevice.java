/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDebugDevice.java
 *
 * Created on 28-Mar-2010, 17:47:30
 */

package straightskeleton.debug;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.vecmath.Point3d;
import straightskeleton.Corner;
import straightskeleton.Edge;
import straightskeleton.Output;
import straightskeleton.Output.Face;
import straightskeleton.debug.DebugDevice.Status;

/**
 *
 * @author twak
 */
public class JDebugDevice extends javax.swing.JPanel {

    DebugDevice dd;
    /** Creates new form JDebugDevice */
    public JDebugDevice() {
        initComponents();
    }

    public JDebugDevice( DebugDevice dd ) {
        this.dd = dd;
        initComponents();
        initList();

    }

    private void initList()
    {
         dataSetList.clearSelection();
        
         DefaultListModel model = new DefaultListModel();

         for (Status s : new ArrayList<Status> ( dd.toDisplay) )
            model.addElement( s );

         dataSetList.setModel(model);
    }

    void pingChanged() {
        initList();
        revalidate();
        repaint();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSrolelrThingy = new javax.swing.JScrollPane();
        dataSetList = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        elementInfo = new javax.swing.JTextArea();
        pointEditorPanel = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        dataSetList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dataSetListValueChanged(evt);
            }
        });
        jSrolelrThingy.setViewportView(dataSetList);

        elementInfo.setColumns(20);
        elementInfo.setRows(5);
        jScrollPane1.setViewportView(elementInfo);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jSrolelrThingy, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSrolelrThingy, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addContainerGap())
        );

        pointEditorPanel.setLayout(new java.awt.GridLayout(1, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pointEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pointEditorPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dataSetListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataSetListValueChanged
        Status t = (Status)dataSetList.getSelectedValue();
        pointEditorPanel.removeAll();
        if (t == null)
            return;
        
        pointEditorPanel.add (new DebugPointEditor(t.corners, t.output) {

            @Override
            public void hoverOver(Corner c) {
                elementInfo.setText(
                        c.toString() + "\n" +
                        "next "+c.nextC.toString() + "\n" +
                        "prev "+c.prevC.toString() + "\n" +
                        "next "+c.nextL.toString() + "\n" +
                        "prev "+c.prevL.toString() + "\n" 
                        );
                Map<Corner, Color> highlight = new HashMap();
                highlight.put(c.nextC, Color.cyan);
                highlight.put(c.prevC, Color.red);
                setHightLights(highlight);
            }

            @Override
            public void hoverOver(Edge e) {

                if (e == null)
                {
//                    elementInfo.setText("hover like a butterfly");
                    setHightLights(new HashMap());
                    return;
                }

                Map<Corner, Color> highlight = new HashMap();
                StringBuilder sb = new StringBuilder (e.toString() +"\na:"+e.getAngle()+"\ncc:\n");
                for (Corner c : e.currentCorners)
                {
                    highlight.put(c, Color.red);
                    sb.append("  "+c+"\n");
                }
                setHightLights(highlight);

                elementInfo.setText(sb.toString());
            }

            @Override
            public void hoverOver(Face f, Output output) {
                elementInfo.setText(f.results.toString());


                Map<Corner, Color> highlight = new HashMap();

                highlight (f,  Color.green.darker(), highlight);

                // hack! - highlight edges
                for (;;)
                {
//                    System.err.print ("now looking for "+f);
                    f = f.parent;
//                    System.err.println (" got "+f);
                    if (f != null)
                        highlight (f,  new Color (255,100,255), highlight);
                    else break;
                }


                setHightLights(highlight);

            }

            public void highlight (Face f, Color color, Map<Corner, Color> highlight)
            {
                for (Point3d p : f.results.map.keySet())
                {
                    highlight.put( new Corner (p.x, p.y, p.z), color);

                    for (Point3d p2 : f.results.map.get(p))
                        highlightEdges.put(new Edge(p, p2, 0xdeadbeef), color);
                }
            }

        });
        pointEditorPanel.revalidate();
        pointEditorPanel.repaint();
    }//GEN-LAST:event_dataSetListValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList dataSetList;
    private javax.swing.JTextArea elementInfo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jSrolelrThingy;
    private javax.swing.JPanel pointEditorPanel;
    // End of variables declaration//GEN-END:variables

}
